import React from 'react';
import { ModalReactProps } from './Modal';
import '@douyinfe/semi-foundation/lib/cjs/modal/modal.css';
export interface ConfirmProps extends ModalReactProps {
    type: 'success' | 'info' | 'warning' | 'error' | 'confirm';
}
export default function confirm<T>(props: ConfirmProps): {
    destroy: () => void;
    update: (newConfig: T extends {
        type: Exclude<ConfirmProps['type'], 'confirm'>;
    } ? ModalReactProps : ConfirmProps) => void;
};
export declare function withInfo(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: string | number | boolean | React.ReactFragment | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: boolean;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "info";
};
export declare function withSuccess(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: string | number | boolean | React.ReactFragment | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: boolean;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "success";
};
export declare function withWarning(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: string | number | boolean | React.ReactFragment | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: boolean;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "warning";
};
export declare function withError(props: ModalReactProps): {
    title?: React.ReactNode;
    children?: React.ReactNode;
    size?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").Size;
    style?: React.CSSProperties;
    className?: string;
    motion?: boolean;
    getPopupContainer?: () => HTMLElement;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    direction?: any;
    width?: string | number;
    height?: string | number;
    mask?: boolean;
    visible?: boolean;
    content?: React.ReactNode;
    icon: string | number | boolean | React.ReactFragment | JSX.Element;
    zIndex?: number;
    closeOnEsc?: boolean;
    preventScroll?: boolean;
    afterClose?: () => void;
    keepDOM?: boolean;
    cancelText?: string;
    okText?: string;
    closeIcon?: React.ReactNode;
    bodyStyle?: React.CSSProperties;
    closable?: boolean;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    maskClosable?: boolean;
    cancelButtonProps?: import("../button").BaseButtonProps;
    centered?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    maskStyle?: React.CSSProperties;
    maskFixed?: boolean;
    okType?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").OKType;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    lazyRender?: boolean;
    fullScreen?: boolean;
    type: "error";
    okButtonProps: {
        id?: string;
        block?: boolean;
        circle?: boolean;
        children?: React.ReactNode;
        disabled?: boolean;
        className?: string;
        icon?: React.ReactNode;
        iconPosition?: "left" | "right";
        loading?: boolean;
        htmlType?: import("../button").HtmlType;
        size?: import("../button").Size;
        style?: React.CSSProperties;
        theme?: import("../button").Theme;
        type: import("../button").Type;
        prefixCls?: string;
        onClick?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseDown?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseEnter?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLButtonElement>;
        'aria-label'?: string;
        title?: string;
        name?: string;
        value?: string | number | readonly string[];
        onAnimationStart?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationEnd?: React.AnimationEventHandler<HTMLButtonElement>;
        form?: string;
        slot?: string;
        hidden?: boolean;
        color?: string;
        onChange?: React.FormEventHandler<HTMLButtonElement>;
        defaultChecked?: boolean;
        defaultValue?: string | number | readonly string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        autoFocus?: boolean;
        formAction?: string;
        formEncType?: string;
        formMethod?: string;
        formNoValidate?: boolean;
        formTarget?: string;
        dir?: string;
        draggable?: boolean | "false" | "true";
        lang?: string;
        translate?: "no" | "yes";
        prefix?: string;
        contentEditable?: "inherit" | (boolean | "false" | "true");
        inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
        tabIndex?: number;
        role?: React.AriaRole;
        onMouseOut?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOver?: React.MouseEventHandler<HTMLButtonElement>;
        onFocus?: React.FocusEventHandler<HTMLButtonElement>;
        onBlur?: React.FocusEventHandler<HTMLButtonElement>;
        onKeyDown?: React.KeyboardEventHandler<HTMLButtonElement>;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "dialog" | "menu" | "listbox" | "grid" | "false" | "true" | "tree";
        'aria-controls'?: string;
        'aria-describedby'?: string;
        contextMenu?: string;
        placeholder?: string;
        spellCheck?: boolean | "false" | "true";
        radioGroup?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        is?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "location" | "step" | "date";
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCopyCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCut?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCutCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onPaste?: React.ClipboardEventHandler<HTMLButtonElement>;
        onPasteCapture?: React.ClipboardEventHandler<HTMLButtonElement>;
        onCompositionEnd?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionStart?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLButtonElement>;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLButtonElement>;
        onFocusCapture?: React.FocusEventHandler<HTMLButtonElement>;
        onBlurCapture?: React.FocusEventHandler<HTMLButtonElement>;
        onChangeCapture?: React.FormEventHandler<HTMLButtonElement>;
        onBeforeInput?: React.FormEventHandler<HTMLButtonElement>;
        onBeforeInputCapture?: React.FormEventHandler<HTMLButtonElement>;
        onInput?: React.FormEventHandler<HTMLButtonElement>;
        onInputCapture?: React.FormEventHandler<HTMLButtonElement>;
        onReset?: React.FormEventHandler<HTMLButtonElement>;
        onResetCapture?: React.FormEventHandler<HTMLButtonElement>;
        onSubmit?: React.FormEventHandler<HTMLButtonElement>;
        onSubmitCapture?: React.FormEventHandler<HTMLButtonElement>;
        onInvalid?: React.FormEventHandler<HTMLButtonElement>;
        onInvalidCapture?: React.FormEventHandler<HTMLButtonElement>;
        onLoad?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onError?: React.ReactEventHandler<HTMLButtonElement>;
        onErrorCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyPress?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyUp?: React.KeyboardEventHandler<HTMLButtonElement>;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLButtonElement>;
        onAbort?: React.ReactEventHandler<HTMLButtonElement>;
        onAbortCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlay?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayThrough?: React.ReactEventHandler<HTMLButtonElement>;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onDurationChange?: React.ReactEventHandler<HTMLButtonElement>;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEmptied?: React.ReactEventHandler<HTMLButtonElement>;
        onEmptiedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEncrypted?: React.ReactEventHandler<HTMLButtonElement>;
        onEncryptedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onEnded?: React.ReactEventHandler<HTMLButtonElement>;
        onEndedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedData?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedMetadata?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadStart?: React.ReactEventHandler<HTMLButtonElement>;
        onLoadStartCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPause?: React.ReactEventHandler<HTMLButtonElement>;
        onPauseCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPlay?: React.ReactEventHandler<HTMLButtonElement>;
        onPlayCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onPlaying?: React.ReactEventHandler<HTMLButtonElement>;
        onPlayingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onProgress?: React.ReactEventHandler<HTMLButtonElement>;
        onProgressCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onRateChange?: React.ReactEventHandler<HTMLButtonElement>;
        onRateChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSeeked?: React.ReactEventHandler<HTMLButtonElement>;
        onSeekedCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSeeking?: React.ReactEventHandler<HTMLButtonElement>;
        onSeekingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onStalled?: React.ReactEventHandler<HTMLButtonElement>;
        onStalledCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onSuspend?: React.ReactEventHandler<HTMLButtonElement>;
        onSuspendCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onTimeUpdate?: React.ReactEventHandler<HTMLButtonElement>;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onVolumeChange?: React.ReactEventHandler<HTMLButtonElement>;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onWaiting?: React.ReactEventHandler<HTMLButtonElement>;
        onWaitingCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onAuxClick?: React.MouseEventHandler<HTMLButtonElement>;
        onAuxClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onContextMenu?: React.MouseEventHandler<HTMLButtonElement>;
        onContextMenuCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onDoubleClick?: React.MouseEventHandler<HTMLButtonElement>;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onDrag?: React.DragEventHandler<HTMLButtonElement>;
        onDragCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnd?: React.DragEventHandler<HTMLButtonElement>;
        onDragEndCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnter?: React.DragEventHandler<HTMLButtonElement>;
        onDragEnterCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragExit?: React.DragEventHandler<HTMLButtonElement>;
        onDragExitCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragLeave?: React.DragEventHandler<HTMLButtonElement>;
        onDragLeaveCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragOver?: React.DragEventHandler<HTMLButtonElement>;
        onDragOverCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDragStart?: React.DragEventHandler<HTMLButtonElement>;
        onDragStartCapture?: React.DragEventHandler<HTMLButtonElement>;
        onDrop?: React.DragEventHandler<HTMLButtonElement>;
        onDropCapture?: React.DragEventHandler<HTMLButtonElement>;
        onMouseDownCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseMove?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOutCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseOverCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseUp?: React.MouseEventHandler<HTMLButtonElement>;
        onMouseUpCapture?: React.MouseEventHandler<HTMLButtonElement>;
        onSelect?: React.ReactEventHandler<HTMLButtonElement>;
        onSelectCapture?: React.ReactEventHandler<HTMLButtonElement>;
        onTouchCancel?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchEnd?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchEndCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchMove?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchStart?: React.TouchEventHandler<HTMLButtonElement>;
        onTouchStartCapture?: React.TouchEventHandler<HTMLButtonElement>;
        onPointerDown?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerDownCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerMove?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerUp?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerUpCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerCancel?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerEnter?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerLeave?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOver?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOverCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOut?: React.PointerEventHandler<HTMLButtonElement>;
        onPointerOutCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onGotPointerCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onLostPointerCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement>;
        onScroll?: React.UIEventHandler<HTMLButtonElement>;
        onScrollCapture?: React.UIEventHandler<HTMLButtonElement>;
        onWheel?: React.WheelEventHandler<HTMLButtonElement>;
        onWheelCapture?: React.WheelEventHandler<HTMLButtonElement>;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationIteration?: React.AnimationEventHandler<HTMLButtonElement>;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLButtonElement>;
        onTransitionEnd?: React.TransitionEventHandler<HTMLButtonElement>;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLButtonElement>;
    };
};
export declare function withConfirm(props: ModalReactProps): {
    cancelButtonProps?: import("../button").BaseButtonProps;
    children?: React.ReactNode;
    okButtonProps?: import("../button").BaseButtonProps;
    bodyStyle?: React.CSSProperties;
    maskStyle?: React.CSSProperties;
    style?: React.CSSProperties;
    icon: string | number | boolean | React.ReactFragment | JSX.Element;
    closeIcon?: React.ReactNode;
    title?: React.ReactNode;
    content?: React.ReactNode;
    footer?: React.ReactNode;
    header?: React.ReactNode;
    onCancel?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    onOk?: (e: React.MouseEvent<Element, MouseEvent>) => void | Promise<any>;
    afterClose?: () => void;
    cancelText?: string;
    centered?: boolean;
    className?: string;
    closable?: boolean;
    confirmLoading?: boolean;
    cancelLoading?: boolean;
    hasCancel?: boolean;
    height?: string | number;
    mask?: boolean;
    maskClosable?: boolean;
    maskFixed?: boolean;
    motion?: boolean;
    okText?: string;
    okType?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").OKType;
    visible?: boolean;
    width?: string | number;
    zIndex?: number;
    getPopupContainer?: () => HTMLElement;
    closeOnEsc?: boolean;
    size?: import("@douyinfe/semi-foundation/lib/cjs/modal/modalFoundation").Size;
    lazyRender?: boolean;
    keepDOM?: boolean;
    direction?: any;
    fullScreen?: boolean;
    preventScroll?: boolean;
    type: "confirm";
};
