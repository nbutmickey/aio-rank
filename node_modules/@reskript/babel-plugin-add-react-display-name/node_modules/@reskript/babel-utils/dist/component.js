import path from 'node:path';
const KEY_REACT_FUNCTIONS = new Set(['createElement', 'cloneElement']);
const resolveCalleeName = (path) => {
    const callee = path.get('callee');
    if (callee.isIdentifier()) {
        return callee.node.name;
    }
    if (callee.isMemberExpression()) {
        const property = callee.get('property');
        return property.isIdentifier() ? property.node.name : '';
    }
    return '';
};
// 函数体有以下东西就认定它是个组件：
//
// 1. 有`cloneElement`或`createElement`的调用
// 2. 有任何的JSX语法
const isFunctionBodyComponentLike = (path) => {
    let matched = false;
    const visitor = {
        JSXElement(path) {
            matched = true;
            path.stop();
        },
        CallExpression(path) {
            const calleeName = resolveCalleeName(path);
            if (KEY_REACT_FUNCTIONS.has(calleeName)) {
                matched = true;
                path.stop();
            }
        },
    };
    path.traverse(visitor);
    return matched;
};
export const isComponentDeclaration = (path, strict) => {
    var _a, _b;
    const functionName = (_b = (_a = path.node.id) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';
    const args = path.node.params;
    return args.length <= 1 && /^[A-Z]/.test(functionName) && (!strict || isFunctionBodyComponentLike(path));
};
export const resolveComponentName = (declaration, filename) => {
    var _a;
    const functionName = (_a = declaration.node.id) === null || _a === void 0 ? void 0 : _a.name;
    if (functionName) {
        return functionName;
    }
    if (!filename) {
        return 'Unknown';
    }
    const file = path.basename(filename, path.extname(filename));
    return file === 'index' ? path.dirname(filename).split(path.sep).pop() : file;
};
