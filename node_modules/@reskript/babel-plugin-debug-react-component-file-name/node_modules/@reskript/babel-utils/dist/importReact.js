import babel from '@babel/core';
import { findImportStatement } from './import.js';
const insertImportReact = (program, specifier) => {
    const expression = babel.types.importDeclaration([
        babel.types.importSpecifier(babel.types.identifier(specifier), babel.types.identifier(specifier)),
    ], babel.types.stringLiteral('react'));
    const [inserted] = program.unshiftContainer('body', expression);
    return inserted;
};
const constructCallee = (importStatement, specifier) => {
    const specifiers = importStatement.get('specifiers');
    for (const currentSpecifier of specifiers) {
        if (currentSpecifier.isImportNamespaceSpecifier()) {
            const name = currentSpecifier.get('local').node.name;
            return babel.types.memberExpression(babel.types.identifier(name), babel.types.identifier(specifier));
        }
        else if (currentSpecifier.isImportDefaultSpecifier()) {
            // 不要问为什么代码和上面的一样，要问就问`babel`的类型去
            const name = currentSpecifier.get('local').node.name;
            return babel.types.memberExpression(babel.types.identifier(name), babel.types.identifier(specifier));
        }
        else if (currentSpecifier.isImportSpecifier()) {
            const name = currentSpecifier.get('local').node.name;
            if (name === specifier) {
                return babel.types.identifier(specifier);
            }
        }
    }
    // 到这里的时候，应该是`import {xxx} from 'react'`但`xxx`不包含需要的东西，所以要上去追加一个
    importStatement.pushContainer('specifiers', babel.types.importSpecifier(babel.types.identifier(specifier), babel.types.identifier(specifier)));
    return babel.types.identifier(specifier);
};
export const prepareReactImport = (program, specifier) => {
    var _a;
    const importStatement = (_a = findImportStatement(program, 'react')) !== null && _a !== void 0 ? _a : insertImportReact(program, specifier);
    return constructCallee(importStatement, specifier);
};
