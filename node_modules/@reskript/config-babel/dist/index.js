import path from 'node:path';
import debugReactComponentFileName from '@reskript/babel-plugin-debug-react-component-file-name';
import pluginRemovePropTypes from 'babel-plugin-transform-react-remove-prop-types';
// @ts-expect-error
import pluginReactRefresh from 'react-refresh/babel';
import { compact } from '@reskript/core';
import { compatPluginTarget, fillBabelConfigOptions } from './utils.js';
import getParseOnlyBabelConfigFilled from './parseOnly.js';
import getTransformBabelConfigFilled from './transform.js';
export const getParseOnlyBabelConfig = (options) => {
    return getParseOnlyBabelConfigFilled(fillBabelConfigOptions(options));
};
export const getTransformBabelConfig = (input) => {
    return getTransformBabelConfigFilled(fillBabelConfigOptions(input));
};
const requireFileName = (options) => {
    const { mode, hostType } = options;
    return mode === 'development' && hostType === 'application';
};
export const getBabelConfig = (input) => {
    const options = fillBabelConfigOptions(input);
    const { mode, hot, hostType, cwd, srcDirectory } = options;
    const transform = getTransformBabelConfig(options);
    const requireReactOptimization = mode === 'production' && hostType === 'application';
    const plugins = [
        // 这东西必须放在最前面，不然其它插件会转义出如`function Wrapper()`这样的函数，这个插件再插入代码就会出问题
        requireFileName(options) && [
            debugReactComponentFileName,
            {
                srcDirectory: path.resolve(cwd, srcDirectory),
                fullPathPrefix: options.openInEditorPrefix,
            },
        ],
        ...transform.plugins || [],
        requireReactOptimization && compatPluginTarget(pluginRemovePropTypes),
        hot && [compatPluginTarget(pluginReactRefresh), { skipEnvCheck: true }],
    ];
    return { presets: transform.presets, plugins: compact(plugins) };
};
