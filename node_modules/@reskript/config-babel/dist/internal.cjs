'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var presetEnv = require('@babel/preset-env');
var presetTypeScript = require('@babel/preset-typescript');
var presetReact = require('@babel/preset-react');
var pluginDecorators = require('@babel/plugin-proposal-decorators');
var pluginClassProperties = require('@babel/plugin-proposal-class-properties');
var pluginDoExpressions = require('@babel/plugin-proposal-do-expressions');
var pluginExportDefaultFrom = require('@babel/plugin-proposal-export-default-from');
var pluginExportNamespaceFrom = require('@babel/plugin-proposal-export-namespace-from');
var pluginNullishCoalescingOperator = require('@babel/plugin-proposal-nullish-coalescing-operator');
var pluginNumericSeparator = require('@babel/plugin-proposal-numeric-separator');
var pluginOptionalChaining = require('@babel/plugin-proposal-optional-chaining');
var pluginThrowExpressions = require('@babel/plugin-proposal-throw-expressions');
var pluginDynamicImport = require('@babel/plugin-syntax-dynamic-import');
var pluginImportMeta = require('@babel/plugin-syntax-import-meta');
var pluginImport = require('babel-plugin-import');
var pluginStyledComponents = require('babel-plugin-styled-components');
var pluginEmotion = require('@emotion/babel-plugin');
var pluginTypeScriptMetadata = require('babel-plugin-transform-typescript-metadata');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var presetEnv__default = /*#__PURE__*/_interopDefaultLegacy(presetEnv);
var presetTypeScript__default = /*#__PURE__*/_interopDefaultLegacy(presetTypeScript);
var presetReact__default = /*#__PURE__*/_interopDefaultLegacy(presetReact);
var pluginDecorators__default = /*#__PURE__*/_interopDefaultLegacy(pluginDecorators);
var pluginClassProperties__default = /*#__PURE__*/_interopDefaultLegacy(pluginClassProperties);
var pluginDoExpressions__default = /*#__PURE__*/_interopDefaultLegacy(pluginDoExpressions);
var pluginExportDefaultFrom__default = /*#__PURE__*/_interopDefaultLegacy(pluginExportDefaultFrom);
var pluginExportNamespaceFrom__default = /*#__PURE__*/_interopDefaultLegacy(pluginExportNamespaceFrom);
var pluginNullishCoalescingOperator__default = /*#__PURE__*/_interopDefaultLegacy(pluginNullishCoalescingOperator);
var pluginNumericSeparator__default = /*#__PURE__*/_interopDefaultLegacy(pluginNumericSeparator);
var pluginOptionalChaining__default = /*#__PURE__*/_interopDefaultLegacy(pluginOptionalChaining);
var pluginThrowExpressions__default = /*#__PURE__*/_interopDefaultLegacy(pluginThrowExpressions);
var pluginDynamicImport__default = /*#__PURE__*/_interopDefaultLegacy(pluginDynamicImport);
var pluginImportMeta__default = /*#__PURE__*/_interopDefaultLegacy(pluginImportMeta);
var pluginImport__default = /*#__PURE__*/_interopDefaultLegacy(pluginImport);
var pluginStyledComponents__default = /*#__PURE__*/_interopDefaultLegacy(pluginStyledComponents);
var pluginEmotion__default = /*#__PURE__*/_interopDefaultLegacy(pluginEmotion);
var pluginTypeScriptMetadata__default = /*#__PURE__*/_interopDefaultLegacy(pluginTypeScriptMetadata);

const DEFAULT_OPTIONS = {
  uses: ['antd', 'lodash'],
  mode: 'development',
  hot: false,
  hostType: 'application',
  polyfill: false,
  modules: false,
  displayName: 'auto',
  cwd: process.cwd(),
  srcDirectory: 'src',
  openInEditorPrefix: ''
};
const fillBabelConfigOptions = options => {
  return {
    ...DEFAULT_OPTIONS,
    ...options
  };
};
const shouldEnable = (library, config) => {
  return config.includes(library);
};
const compatPluginTarget = target => {
  if (!target || typeof target !== 'object') {
    return target;
  }
  if ('default' in target) {
    return compatPluginTarget(target.default);
  }
  return target;
};

// 因为要转CJS，不能依赖`@reskript/core`提供的`compact`
const hasValue$1 = value => !!value;
var getParseOnlyBabelConfigFilled = (options => {
  const {
    polyfill,
    modules,
    uses
  } = options;
  const presets = [[compatPluginTarget(presetEnv__default["default"]), {
    modules,
    bugfixes: true,
    debug: false,
    useBuiltIns: polyfill ? 'usage' : false,
    corejs: polyfill ? {
      version: 3,
      proposals: true
    } : undefined
  }], compatPluginTarget(presetTypeScript__default["default"]), [compatPluginTarget(presetReact__default["default"]), {
    runtime: 'automatic',
    importSource: shouldEnable('emotion', uses) ? '@emotion/react' : 'react'
  }]];
  const plugins = [[compatPluginTarget(pluginDecorators__default["default"]), {
    legacy: true
  }], compatPluginTarget(pluginClassProperties__default["default"]), compatPluginTarget(pluginDoExpressions__default["default"]),
  // export Foo from './Foo';
  compatPluginTarget(pluginExportDefaultFrom__default["default"]),
  // export {Foo} from './Foo';
  compatPluginTarget(pluginExportNamespaceFrom__default["default"]),
  // const foo = obejct.foo ?? 'default';
  compatPluginTarget(pluginNullishCoalescingOperator__default["default"]),
  // 1_234_567
  compatPluginTarget(pluginNumericSeparator__default["default"]),
  // object?.foo?.bar
  compatPluginTarget(pluginOptionalChaining__default["default"]),
  // const valid = input.isValid() || throw new Error('Invalid')
  compatPluginTarget(pluginThrowExpressions__default["default"]), compatPluginTarget(pluginDynamicImport__default["default"]), compatPluginTarget(pluginImportMeta__default["default"])];
  return {
    plugins,
    presets: presets.filter(hasValue$1)
  };
});

// 因为要转CJS，不能依赖`@reskript/core`提供的`compact`
const hasValue = value => !!value;
const requireDisplayName = options => {
  const {
    displayName,
    mode
  } = options;
  return displayName === true || displayName === 'auto' && mode === 'development';
};
var getTransformBabelConfigFilled = (options => {
  const parseOnly = getParseOnlyBabelConfigFilled(options);
  const {
    uses,
    mode
  } = options;
  const plugins = [shouldEnable('styled-components', uses) && [compatPluginTarget(pluginStyledComponents__default["default"]), {
    displayName: requireDisplayName(options),
    minify: mode === 'production',
    meaninglessFileNames: ['index']
  }], shouldEnable('emotion', uses) && [compatPluginTarget(pluginEmotion__default["default"]), {
    sourceMap: mode === 'development',
    // TODO: https://github.com/emotion-js/emotion/issues/2305
    // autoLabel: mode === 'production' ? 'never' : 'always',
    autoLabel: 'always'
  }], shouldEnable('reflect-metadata', uses) && compatPluginTarget(pluginTypeScriptMetadata__default["default"]), ...(parseOnly.plugins || []), shouldEnable('antd', uses) && [compatPluginTarget(pluginImport__default["default"]), {
    libraryName: 'antd',
    libraryDirectory: 'es',
    style: true
  }]];
  return {
    presets: parseOnly.presets,
    plugins: plugins.filter(hasValue)
  };
});

const getParseOnlyBabelConfig = options => {
  return getParseOnlyBabelConfigFilled(fillBabelConfigOptions(options));
};
const getTransformBabelConfig = input => {
  return getTransformBabelConfigFilled(fillBabelConfigOptions(input));
};

exports.getParseOnlyBabelConfig = getParseOnlyBabelConfig;
exports.getTransformBabelConfig = getTransformBabelConfig;
