import { ProjectSettings, Observe, ClientProjectSettings, CommandInput } from './interface/index.js';
import { fillProjectSettings, PartialProjectSettings, PartialViteProjectSettings, PartialWebpackProjectSettings } from './defaults.js';
export * from './interface/index.js';
export { fillProjectSettings, PartialProjectSettings };
interface PluginSetting {
    plugins?: ClientProjectSettings['plugins'];
}
export type WebpackUserSetting = Omit<PartialWebpackProjectSettings, 'driver'> & PluginSetting;
export type ViteUserSetting = Omit<PartialViteProjectSettings, 'driver'> & PluginSetting;
export type UserSettings = PartialProjectSettings & PluginSetting;
type ResolveProjectSettingsOptions = CommandInput & {
    specifiedFile?: string;
};
export declare const readProjectSettings: (options: ResolveProjectSettingsOptions) => Promise<ProjectSettings>;
export declare const watchProjectSettings: (options: ResolveProjectSettingsOptions) => Promise<Observe>;
export declare const warnAndExitOnInvalidFinalizeReturn: (value: any, scope: string) => void;
export declare const strictCheckRequiredDependency: (projectSettings: ProjectSettings, cwd: string) => Promise<void>;
export declare function configure(driver: 'webpack', settings: WebpackUserSetting): UserSettings;
export declare function configure(driver: 'vite', settings: ViteUserSetting): UserSettings;
