/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { IncomingMessage, ServerResponse } from 'node:http';
import { ServerOptions as HttpsServerOptions } from 'node:https';
import { Configuration } from 'webpack-dev-server';
import { ServerOptions } from 'vite';
import { ViteBuildEntry, WebpackBuildEntry } from './shared.js';
export type Middleware = (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) => void;
export interface MiddlewareHook {
    use: (route: string, fn: Middleware) => void;
    get: (route: string, fn: Middleware) => void;
    post: (route: string, fn: Middleware) => void;
    put: (route: string, fn: Middleware) => void;
    delete: (route: string, fn: Middleware) => void;
    patch: (route: string, fn: Middleware) => void;
}
export interface MiddlewareCustomization {
    before: MiddlewareHook;
    after: MiddlewareHook;
}
interface ClientHttps {
    client: true;
    serverOptions?: HttpsServerOptions;
}
export type DevServerHttps = {
    proxy?: boolean;
} & ({
    client?: false;
} | ClientHttps);
export type CustomizeMiddleware = (customization: MiddlewareCustomization) => void;
export interface DevServerSettings {
    readonly https?: DevServerHttps;
    readonly port: number;
    readonly apiPrefixes: string[];
    readonly defaultProxyDomain: string;
    readonly proxyRewrite: Record<string, string>;
    readonly hot: boolean;
    readonly openPage: string;
    readonly customizeMiddleware: CustomizeMiddleware;
}
export interface WebpackDevServerSettings extends DevServerSettings {
    readonly finalize: (serverConfig: Configuration, env: WebpackBuildEntry) => Configuration | Promise<Configuration>;
}
export interface ViteDevServerSettings extends DevServerSettings {
    readonly finalize: (serverConfig: ServerOptions, env: ViteBuildEntry) => ServerOptions | Promise<ServerOptions>;
}
export {};
