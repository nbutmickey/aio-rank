const SHARED_BUILD_SETTINGS = {
    uses: ['antd', 'lodash'],
    thirdParty: false,
    reportLintErrors: true,
    largeAssetSize: 8 * 1024,
    appTitle: 'Reskript App',
    transformEntryHtml: (html) => html,
    excludeFeatures: ['dev'],
};
const fillScriptSettings = (settings) => {
    return {
        babel: true,
        polyfill: true,
        displayName: true,
        finalize: config => config,
        ...settings,
    };
};
const fillViteStyleSettings = (settings) => {
    return {
        resources: [],
        lessVariables: {},
        modules: true,
        ...settings,
    };
};
const fillWebpackStyleSettings = (settings) => {
    return {
        extract: false,
        ...fillViteStyleSettings(settings),
    };
};
const fillInspectSettings = (settings) => {
    return {
        duplicatePackages: 'off',
        htmlImportable: 'off',
        ...settings,
        initialResources: {
            count: 'print',
            totalSize: 'print',
            sizeDeviation: 'off',
            disallowImports: 'off',
            ...settings === null || settings === void 0 ? void 0 : settings.initialResources,
        },
    };
};
const fillWebpackBuildSettings = (settings) => {
    return {
        ...SHARED_BUILD_SETTINGS,
        finalize: config => config,
        ...settings,
        script: fillScriptSettings(settings === null || settings === void 0 ? void 0 : settings.script),
        style: fillWebpackStyleSettings(settings === null || settings === void 0 ? void 0 : settings.style),
        inspect: fillInspectSettings(settings === null || settings === void 0 ? void 0 : settings.inspect),
    };
};
const fillViteBuildSettings = (settings) => {
    return {
        ...SHARED_BUILD_SETTINGS,
        finalize: config => config,
        ...settings,
        script: fillScriptSettings(settings === null || settings === void 0 ? void 0 : settings.script),
        style: fillViteStyleSettings(settings === null || settings === void 0 ? void 0 : settings.style),
        inspect: fillInspectSettings(settings === null || settings === void 0 ? void 0 : settings.inspect),
    };
};
const fillDevServerSettings = (settings) => {
    return {
        port: 8788,
        apiPrefixes: [],
        defaultProxyDomain: '',
        proxyRewrite: {},
        hot: true,
        openPage: '',
        customizeMiddleware: hook => hook,
        ...settings,
    };
};
const fillWebpackDevServerSettings = (settings) => {
    var _a;
    return {
        ...fillDevServerSettings(settings),
        finalize: (_a = settings === null || settings === void 0 ? void 0 : settings.finalize) !== null && _a !== void 0 ? _a : (config => config),
    };
};
const fillViteDevServerSettings = (settings) => {
    var _a;
    return {
        ...fillDevServerSettings(settings),
        finalize: (_a = settings === null || settings === void 0 ? void 0 : settings.finalize) !== null && _a !== void 0 ? _a : (config => config),
    };
};
const fillPlaySettings = (settings) => {
    return {
        defaultEnableConcurrentMode: false,
        ...settings,
    };
};
const fillPortalSettings = (settings) => {
    return {
        setup: () => { },
        ...settings,
    };
};
export const fillProjectSettings = (settings) => {
    var _a, _b, _c, _d;
    // NOTE: 允许用户不写`driver`的，所以默认路径必须是`webpack`，下面的分支不能换位置
    if (settings.driver === 'vite') {
        return {
            driver: settings.driver,
            cwd: (_a = settings.cwd) !== null && _a !== void 0 ? _a : process.cwd(),
            featureMatrix: (_b = settings.featureMatrix) !== null && _b !== void 0 ? _b : { stable: {}, dev: {} },
            build: fillViteBuildSettings(settings.build),
            devServer: fillViteDevServerSettings(settings.devServer),
            play: fillPlaySettings(settings.play),
            portal: fillPortalSettings(settings.portal),
        };
    }
    return {
        driver: settings.driver,
        cwd: (_c = settings.cwd) !== null && _c !== void 0 ? _c : process.cwd(),
        featureMatrix: (_d = settings.featureMatrix) !== null && _d !== void 0 ? _d : { stable: {}, dev: {} },
        build: fillWebpackBuildSettings(settings.build),
        devServer: fillWebpackDevServerSettings(settings.devServer),
        play: fillPlaySettings(settings.play),
        portal: fillPortalSettings(settings.portal),
    };
};
